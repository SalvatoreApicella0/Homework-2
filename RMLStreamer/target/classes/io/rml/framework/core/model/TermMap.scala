/**
  * MIT License
  *
  * Copyright (C) 2017 - 2020 RDF Mapping Language (RML)
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
  * in the Software without restriction, including without limitation the rights
  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  * copies of the Software, and to permit persons to whom the Software is
  * furnished to do so, subject to the following conditions:
  *
  * The above copyright notice and this permission notice shall be included in
  * all copies or substantial portions of the Software.
  *
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  * THE SOFTWARE.
  *
  **/

package io.rml.framework.core.model

/**
  * This trait defines a term map.
  * Term maps are used to generate the subjects, predicates and
  * objects of the RDF triples that are generated by a triples map.
  * Consequently, there are several kinds of term maps,
  * depending on where in the mapping they occur:
  * subject maps, predicate maps, object maps and graph maps.
  *
  * A term map must be exactly one of the following:
  *
  * - a constant-valued term map,
  * - a reference-valued term map,
  * - a template-valued term map.
  *
  * Spec: http://rml.io/spec.html#term-map
  *
  */
trait TermMap extends Node {

  def functionMap: List[FunctionMap]= List()

  /**
    *
    * @return
    */
  def constant: Option[Entity]

  /**
    *
    * @return
    */
  def datatype: Option[Uri] = None

  /**
    *
    * @return
    */
  def language: Option[Literal] = None

  /**
    *
    * @return
    */
  def reference: Option[Literal]

  /**
    *
    * @return
    */
  def template: Option[Literal]

  /**
    *
    * @return
    */
  def termType: Option[Uri]

  def logicalTargets: Set[LogicalTarget]

  def getAllLogicalTargetIds: Set[String] = {
    logicalTargets
      .map(logicalTarget => logicalTarget.identifier)
  }

  /**
    *
    * @return
    */
  def hasConstant: Boolean = constant.isDefined

  def hasFunctionMap:Boolean = functionMap.nonEmpty
  /**
    *
    * @return
    */
  def hasReference: Boolean = reference.isDefined

  /**
    *
    * @return
    */
  def hasTemplate: Boolean = template.isDefined

  /**
    *
    * @return
    */
  def hasTermType: Boolean = termType.isDefined


}
